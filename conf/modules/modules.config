/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
        ext.when   = When to run the module.
----------------------------------------------------------------------------------------
*/

process {

    publishDir           = [
        mode: params.publish_dir_mode,
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        cache = false
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/pipeline_info" },
            pattern: '*_versions.yml'
        ]
    }

// QC

    withName: 'FASTQC' {
        ext.args         = '--quiet'
        ext.when         = { !(params.skip_tools && params.skip_tools.split(',').contains('fastqc')) }
        publishDir       = [
            [
                path: { "${params.outdir}/reports/fastqc/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*{html,zip}"
            ]
        ]
    }

    withName: 'NFCORE_SAREK:SAREK:(BAM_MARKDUPLICATES|BAM_MARKDUPLICATES_SPARK):CRAM_QC_MOSDEPTH_SAMTOOLS:SAMTOOLS_STATS' {
        ext.when         = { !(params.skip_tools && params.skip_tools.split(',').contains('samtools')) }
        ext.prefix       = { "${meta.id}.md.cram" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reports/samtools/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'NFCORE_SAREK:SAREK:CRAM_QC_NO_MD:SAMTOOLS_STATS' {
        ext.when         = { !(params.skip_tools && params.skip_tools.split(',').contains('samtools')) }
        ext.prefix       = { "${meta.id}.sorted.cram" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reports/samtools/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MOSDEPTH' {
        ext.args = { !params.wes ? "-n --fast-mode --by 500" : ""}
        ext.prefix       = { params.skip_tools && params.skip_tools.split(',').contains('markduplicates') ? "${meta.id}.sorted" : "${meta.id}.md" }
        ext.when         = { !(params.skip_tools && params.skip_tools.split(',').contains('mosdepth')) }
        publishDir = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reports/mosdepth/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    if ((params.step == 'mapping' || params.step == 'markduplicates'|| params.step == 'prepare_recalibration'|| params.step == 'recalibrate') && (!(params.skip_tools && params.skip_tools.split(',').contains('baserecalibrator')))) {
        withName: 'NFCORE_SAREK:SAREK:CRAM_QC_RECAL:MOSDEPTH' {
            ext.prefix       = { "${meta.id}.recal" }
        }

        withName: 'NFCORE_SAREK:SAREK:CRAM_QC_RECAL:SAMTOOLS_STATS' {
            ext.prefix       = { "${meta.id}.recal.cram" }
            ext.when         = { !(params.skip_tools && params.skip_tools.split(',').contains('samtools')) }
            publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/reports/samtools/${meta.id}" },
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

// VARIANT CALLING

process{

    // DEEPVARIANT
    withName: 'MERGE_DEEPVARIANT_.*' {
        ext.prefix       = {"${meta.id}.deepvariant"}
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/deepvariant/${meta.id}/" },
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }
    withName: 'MERGE_DEEPVARIANT_GVCF' {
        ext.prefix       = {"${meta.id}.deepvariant.g"}
    }
    withName: 'DEEPVARIANT' {
        ext.prefix       = { meta.num_intervals <= 1 ? "${meta.id}.deepvariant" : "${meta.id}.deepvariant.${intervals.simpleName}" }
        ext.args         = { params.wes ?  "--model_type WES" : "--model_type WGS" }
        ext.when         = { params.tools && params.tools.split(',').contains('deepvariant') }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/" },
            pattern: "*vcf.gz",
            saveAs: { meta.num_intervals > 1 ? null : "deepvariant/${meta.id}/${it}" }
        ]
    }
    withName : 'TABIX_VC_DEEPVARIANT_.*' {
        ext.prefix       = {"${meta.id}.deepvariant"}
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/deepvariant/${meta.id}/" },
            pattern: "*tbi"
        ]
    }

    // FREEBAYES
    withName: 'MERGE_FREEBAYES' {
        ext.prefix       = { "${meta.id}.freebayes" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/freebayes/${meta.id}/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FREEBAYES' {
        //To make sure no naming conflicts ensure with module BCFTOOLS_SORT & the naming being correct in the output folder
        ext.prefix       = { meta.num_intervals <= 1 ? "${meta.id}" : "${meta.id}.${target_bed.simpleName}" }
        ext.args         = '--min-alternate-fraction 0.1 --min-mapping-quality 1'
        ext.when         = { params.tools && params.tools.split(',').contains('freebayes') }
        publishDir       = [
            enabled: false
        ]
    }

    withName: 'BCFTOOLS_SORT' {
        ext.prefix       = { meta.num_intervals <= 1 ? "${meta.id}.freebayes" : "${vcf.minus("vcf")}.sort" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/" },
            pattern: "*vcf.gz",
            saveAs: { meta.num_intervals > 1 ? null : "freebayes/${meta.id}/${it}" }
        ]
    }

    withName : 'TABIX_VC_FREEBAYES' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/freebayes/${meta.id}/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // HAPLOTYPECALLER
    withName: 'MERGE_HAPLOTYPECALLER' {
        ext.prefix       = { params.joint_germline ? "${meta.id}.haplotypecaller.g" : "${meta.id}.haplotypecaller" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/haplotypecaller/${meta.id}/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'GATK4_HAPLOTYPECALLER' {
        ext.args         = { params.joint_germline ? "-ERC GVCF" : "" }
        ext.prefix       = { meta.num_intervals <= 1 ? ( params.joint_germline ? "${meta.id}.haplotypecaller.g" : "${meta.id}.haplotypecaller" ) : ( params.joint_germline ? "${meta.id}.haplotypecaller.${intervals.simpleName}.g" :"${meta.id}.haplotypecaller.${intervals.simpleName}" ) }
        ext.when         = { params.tools && params.tools.split(',').contains('haplotypecaller') }
        publishDir       = [
            enabled: !params.joint_germline,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/"},
            pattern: "*{vcf.gz,vcf.gz.tbi}",
            saveAs: { meta.num_intervals > 1 ? null : "haplotypecaller/${meta.id}/${it}" }
        ]
    }

    withName: 'CNNSCOREVARIANTS' {
        publishDir       = [
            // Otherwise it gets published
            enabled: false
        ]
    }

    withName: 'FILTERVARIANTTRANCHES' {
        ext.prefix       = {"${meta.id}.haplotypecaller"}
        ext.args         = { "--info-key CNN_1D" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/haplotypecaller/${meta.id}/"},
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }

    withName: 'GATK4_GENOMICSDBIMPORT' {
        ext.prefix       = { meta.num_intervals > 1 ? "${meta.intervals_name}.joint" : "joint" }
        ext.when         = { params.tools && params.tools.split(',').contains('haplotypecaller') && params.joint_germline && !params.no_intervals}
    }

    withName: 'GATK4_GENOTYPEGVCFS' {
        ext.prefix       = { meta.num_intervals > 1 ? meta.intervals_name : "joint_germline" }
    }

    if (params.tools && params.tools.contains('haplotypecaller') && params.joint_germline){
        withName: 'NFCORE_SAREK:SAREK:GERMLINE_VARIANT_CALLING:RUN_HAPLOTYPECALLER:JOINT_GERMLINE:BCFTOOLS_SORT' {
            ext.prefix       = { meta.num_intervals <= 1 ? "${meta.id}.joint.sort" : "${vcf.minus("vcf.gz")}.sort" }
            publishDir       = [
                enabled: false
            ]
        }
    }

    withName: 'MERGE_GENOTYPEGVCFS' {
        ext.prefix       = "joint_germline"
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/haplotypecaller/joint_variant_calling/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }

    withName: 'VARIANTRECALIBRATOR_INDEL' {
        ext.prefix = { "${meta.id}_INDEL" }
        ext.args = "-an QD -an MQRankSum -an ReadPosRankSum -an FS -an SOR -an DP  -mode INDEL"
        publishDir = [
            enabled: false
        ]
    }

    withName: 'VARIANTRECALIBRATOR_SNP' {
        ext.prefix = { "${meta.id}_SNP" }
        ext.args = "-an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR -mode SNP"
        publishDir = [
            enabled: false
        ]
    }

    withName: 'GATK4_APPLYVQSR_SNP' {
        ext.prefix = { "${meta.id}_SNP" }
        ext.args = '--truth-sensitivity-filter-level 99.9 -mode SNP'
    }

    withName: 'GATK4_APPLYVQSR_INDEL' {
        ext.prefix    = { "${meta.id}_INDEL" }
        ext.args      = '--truth-sensitivity-filter-level 99.9 -mode INDEL'
    }

    withName: 'MERGE_VQSR' {
        ext.prefix       = "joint_germline_recalibrated"
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/haplotypecaller/joint_variant_calling/"},
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }

    // MANTA
    withName: 'MERGE_MANTA.*' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/manta/${meta.id}/" },
            pattern: "*{diploid_sv,tumor_sv,somatic_sv}.{vcf.gz,vcf.gz.tbi}"
        ]
    }
    withName: 'MERGE_MANTA_DIPLOID' {
        ext.prefix       = {"${meta.id}.manta.diploid_sv"}
    }
    withName: 'MERGE_MANTA_SMALL_INDELS' {
        ext.prefix       = {"${meta.id}.manta.candidate_small_indels"}
    }
    withName: 'MERGE_MANTA_SV' {
        ext.prefix       = {"${meta.id}.manta.candidate_sv"}
    }
    withName: 'MANTA.*' {
        ext.prefix       = { meta.num_intervals <= 1 ? "${meta.id}.manta" : "${meta.id}.manta.${target_bed.simpleName}" }
        ext.args         = { params.wes ? "--exome" : "" }
        ext.when         = { params.tools && params.tools.split(',').contains('manta') }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/" },
            pattern: "*{diploid_sv,tumor_sv,somatic_sv}.{vcf.gz,vcf.gz.tbi}",
            saveAs: { meta.num_intervals > 1 ? null : "manta/${meta.id}/${it}" }
        ]
    }

    // STRELKA
    withName: 'MERGE_STRELKA.*' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/strelka/${meta.id}/" },
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }
    withName: 'MERGE_STRELKA' {
        ext.prefix       = {"${meta.id}.strelka.variants"}
    }
    withName: 'MERGE_STRELKA_GENOME' {
        ext.prefix       = {"${meta.id}.strelka.genome"}
    }
    withName: 'STRELKA_.*' {
        ext.prefix       = { meta.num_intervals <= 1 ? "${meta.id}.strelka" : "${meta.id}.strelka.${target_bed.simpleName}" }
        ext.args         = { params.wes ? "--exome" : "" }
        ext.when         = { params.tools && params.tools.split(',').contains('strelka') }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/" },
            pattern: "*{vcf.gz,vcf.gz.tbi}",
            saveAs: { meta.num_intervals > 1 ? null : "strelka/${meta.id}/${it}" }
        ]
    }

    // TIDDIT
    withName: 'TIDDIT_SV' {
        ext.when         = { params.tools && params.tools.split(',').contains('tiddit') }
        ext.args         = { bwa_index ? "" : "--skip_assembly" }
        ext.prefix       = { "${meta.id}.tiddit" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/tiddit/${meta.id}/" },
            pattern: "*tab",
        ]
    }
    withName : 'TABIX_BGZIP_TIDDIT_SV' {
        ext.prefix       = { "${meta.id}.tiddit" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/tiddit/${meta.id}/" },
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }

// TUMOR_VARIANT_CALLING

    // CONTROLFREEC
    withName: 'ASSESS_SIGNIFICANCE' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/controlfreec/${meta.id}/" },
            pattern: "*{.p.value.txt}"
        ]
    }

    withName: 'CAT_MPILEUP' {
        publishDir       = [
            enabled: true,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/mpileup/${meta.id}/" },
            pattern: "*{mpileup.gz}",
        ]
    }

    withName: 'FREEC_.*' {
        ext.when         = { params.tools && params.tools.split(',').contains('controlfreec') }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/controlfreec/${meta.id}/" },
            pattern: "*{BedGraph,cpn,txt,_CNVs}"
        ]
    }

    withName: 'FREEC_TUMORONLY' {
        ext.args = {[
                    "sample":[
                        inputformat: 'pileup',
                        mateorientation: 'FR'
                    ],
                    "general" :[
                        bedgraphoutput: "TRUE",
                        breakpointthreshold: params.wes ? "1.2" : "0.8", //Values taken from Freec example configs
                        breakpointtype: params.wes ? "4" : "2", // Values taken from Freec example configs
                        coefficientofvariation: params.cf_coeff,
                        contamination: params.cf_contamination ?: "",
                        contaminationadjustment: params.cf_contamination_adjustment ? "TRUE" : "",
                        forcegccontentnormalization: params.wes ? "1" : "0",
                        minimalsubclonepresence: params.wes ? "30" : "20",
                        noisydata: params.wes ? "TRUE" : "FALSE",
                        ploidy: params.cf_ploidy,
                        printNA:  params.wes ? "FALSE" : "TRUE",
                        readcountthreshold:  params.wes ? "50" : "10",
                        sex: meta.sex,
                        //uniquematch: not set
                        window: params.cf_window ?: ""
                        ],
                    "BAF":[
                        minimalcoverageperposition: params.cf_mincov ?: "",
                        minimalqualityperposition: params.cf_minqual ?: "",
                        //"shiftinquality": (optional)not set
                    ]
                ]
            }
    }

    withName: 'FREEC2BED' {
        ext.args = { "${params.cf_ploidy}" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/controlfreec/${meta.id}/" },
            pattern: "*bed"
        ]
    }

    withName: 'FREEC2CIRCOS' {
        ext.args = { "${params.cf_ploidy}" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/controlfreec/${meta.id}/" },
            pattern: "*circos.txt"
        ]
    }

    withName: 'MAKEGRAPH' {
        ext.args = { "${params.cf_ploidy}" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/controlfreec/${meta.id}/" },
            pattern: "*png"
        ]
    }

    withName: 'SAMTOOLS_MPILEUP' {
        ext.when         = { params.tools && (params.tools.split(',').contains('controlfreec') || params.tools.split(',').contains('mpileup')) }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/mpileup/${meta.id}/" },
            pattern: "*mpileup.gz",
            saveAs: { meta.num_intervals > 1 ? null : it }
        ]
    }

    // MANTA
    withName: 'MERGE_MANTA_TUMOR' {
        ext.prefix       = {"${meta.id}.manta.tumor_sv"}
    }

    // MUTECT2
    withName: 'CALCULATECONTAMINATION' {
        ext.prefix       = { "${meta.id}.mutect2" }
        ext.args         = { "-tumor-segmentation ${meta.id}.mutect2.segmentation.table" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : "mutect2/${meta.id}/${filename}" }
        ]
    }

    withName: 'MERGE_MUTECT2.*' {
        ext.prefix       = { "${meta.id}.mutect2" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/mutect2/${meta.id}" },
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }

    withName: 'FILTERMUTECTCALLS.*' {
        ext.prefix       = {"${meta.id}.mutect2.filtered"}
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : "mutect2/${meta.id}/${filename}" }
        ]
    }

    withName: 'GATHERPILEUPSUMMARIES' {
        ext.prefix       = { "${meta.id}.mutect2" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/mutect2/${meta.id}/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'GATHERPILEUPSUMMARIES_.*' {
        ext.prefix       = { "${meta.id}.mutect2" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/mutect2/${meta.tumor_id}_vs_${meta.normal_id}/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'GETPILEUPSUMMARIES.*' {
        ext.prefix       = { meta.num_intervals <= 1 ? "${meta.id}.mutect2" : "${meta.id}.mutect2.${intervals.simpleName}" }
        publishDir        = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/" },
            pattern: "*.table",
            saveAs: { meta.num_intervals > 1 ? null : "mutect2/${meta.id}/${it}" }
        ]
    }

    withName: 'GETPILEUPSUMMARIES_.*' {
        ext.prefix        = { meta.num_intervals <= 1 ? "${meta.id}.mutect2" : "${meta.id}.mutect2.${intervals.simpleName}" }
        publishDir        = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/" },
            pattern: "*.table",
            saveAs: { meta.num_intervals > 1 ? null : "mutect2/${meta.tumor_id}_vs_${meta.normal_id}/${it}" }
        ]
    }

    withName: 'LEARNREADORIENTATIONMODEL' {
        ext.prefix       = { "${meta.id}.mutect2.artifactprior" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/mutect2/${meta.id}/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MERGEMUTECTSTATS' {
        ext.prefix       = { "${meta.id}.mutect2" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/mutect2/${meta.id}/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'GATK4_MUTECT2' {
        ext.prefix       = { meta.num_intervals <= 1 ? "${meta.id}.mutect2" : "${meta.id}.mutect2.${intervals.simpleName}" }
        ext.when         = { params.tools && params.tools.split(',').contains('mutect2') }
        ext.args         = { params.ignore_soft_clipped_bases ? "--dont-use-soft-clipped-bases true --f1r2-tar-gz ${task.ext.prefix}.f1r2.tar.gz" : "--f1r2-tar-gz ${task.ext.prefix}.f1r2.tar.gz" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/" },
            pattern: "*{vcf.gz,vcf.gz.tbi,stats}",
            saveAs: { meta.num_intervals > 1 ? null : "mutect2/${meta.id}/${it}" }
        ]
    }

// PAIR_VARIANT_CALLING

    // ASCAT
    withName: 'ASCAT' {

        ext.args = {[
            "gender": meta.sex,
            "genomeVersion": params.ascat_genome,
            "purity": params.ascat_purity,
            "ploidy": params.ascat_ploidy,
            "minCounts": params.ascat_min_counts,
            "chrom_names": meta.sex == 'XX' ? "c(1:22, 'X')" : "c(1:22, 'X', 'Y')",
            "min_base_qual": params.ascat_min_base_qual,
            "min_map_qual": params.ascat_min_map_qual
            ]}
        ext.when         = { params.tools && params.tools.split(',').contains('ascat') }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/ascat/${meta.id}/" },
            pattern: "*{png,cnvs.txt,metrics.txt,purityploidy.txt,segments.txt,LogR.txt,BAF.txt}"
        ]

    }

    // CONTROLFREEC
    if (params.tools && (params.tools.split(',').contains('controlfreec') || params.tools.split(',').contains('mpileup'))) {
        withName: 'NFCORE_SAREK:SAREK:BAM_VARIANT_CALLING_GERMLINE_ALL:BAM_VARIANT_CALLING_MPILEUP:SAMTOOLS_MPILEUP' {
            ext.prefix = { meta.num_intervals <= 1 ? "${meta.id}.normal" : "${meta.id}_${intervals.simpleName}.normal" }
        }

        withName: 'NFCORE_SAREK:SAREK:BAM_VARIANT_CALLING_GERMLINE_ALL:BAM_VARIANT_CALLING_MPILEUP:CAT_MPILEUP' {
            ext.prefix = { "${meta.id}.normal.mpileup.gz" }
        }

        withName: 'NFCORE_SAREK:SAREK:BAM_VARIANT_CALLING_SOMATIC_ALL:MPILEUP_NORMAL:SAMTOOLS_MPILEUP' {
            ext.prefix = { meta.num_intervals <= 1 ? "${meta.id}.normal" : "${meta.id}_${intervals.simpleName}.normal" }
        }

        withName: 'NFCORE_SAREK:SAREK:BAM_VARIANT_CALLING_SOMATIC_ALL:MPILEUP_NORMAL:CAT_MPILEUP' {
            ext.prefix = { "${meta.id}.normal.mpileup.gz" }
        }

        withName: 'NFCORE_SAREK:SAREK:BAM_VARIANT_CALLING_SOMATIC_ALL:MPILEUP_TUMOR:SAMTOOLS_MPILEUP' {
            ext.prefix = { meta.num_intervals <= 1 ? "${meta.id}.tumor" : "${meta.id}_${intervals.simpleName}.tumor" }
        }

        withName: 'NFCORE_SAREK:SAREK:BAM_VARIANT_CALLING_SOMATIC_ALL:MPILEUP_TUMOR:CAT_MPILEUP' {
            ext.prefix = { "${meta.id}.tumor.mpileup.gz" }
        }

        withName: 'NFCORE_SAREK:SAREK:BAM_VARIANT_CALLING_TUMOR_ONLY_ALL:BAM_VARIANT_CALLING_MPILEUP:SAMTOOLS_MPILEUP' {
            ext.prefix = { meta.num_intervals <= 1 ? "${meta.id}.tumor" : "${meta.id}_${intervals.simpleName}.tumor" }
        }

        withName: 'NFCORE_SAREK:SAREK:BAM_VARIANT_CALLING_TUMOR_ONLY_ALL:BAM_VARIANT_CALLING_MPILEUP:CAT_MPILEUP' {
            ext.prefix = { "${meta.id}.tumor.mpileup.gz" }
        }
    }

    withName: 'FREEC_SOMATIC' {
        ext.args = {[
                    "sample":[
                        inputformat: 'pileup',
                        mateorientation: 'FR'
                    ],
                    "control":[
                        inputformat: "pileup",
                        mateorientation: "FR"
                    ],
                    "general" :[
                        bedgraphoutput: "TRUE",
                        breakpointthreshold: params.wes ? "1.2" : "0.8", //Values taken from Freec example configs
                        breakpointtype: params.wes ? "4" : "2", // Values taken from Freec example configs
                        coefficientofvariation: params.cf_coeff,
                        contamination: params.cf_contamination ?: "",
                        contaminationadjustment: params.cf_contamination_adjustment ? "TRUE" : "",
                        forcegccontentnormalization: params.wes ? "1" : "0",
                        minimalsubclonepresence: params.wes ? "30" : "20",
                        noisydata: params.wes ? "TRUE" : "FALSE",
                        ploidy: params.cf_ploidy,
                        printNA:  params.wes ? "FALSE" : "TRUE",
                        readcountthreshold:  params.wes ? "50" : "10",
                        sex: meta.sex,
                        //uniquematch: not set
                        window: params.cf_window ?: ""
                        ],
                    "BAF":[
                        minimalcoverageperposition: params.cf_mincov ?: "",
                        minimalqualityperposition: params.cf_minqual ?: "",
                        //"shiftinquality": (optional)not set
                    ]
                ]
            }
    }

    // FREEBAYES
    if (params.tools && params.tools.split(',').contains('freebayes')) {
        withName: '.*:PAIR_VARIANT_CALLING:RUN_FREEBAYES_SOMATIC:FREEBAYES' {
            ext.args       = "--pooled-continuous \
                            --pooled-discrete \
                            --genotype-qualities \
                            --report-genotype-likelihood-max \
                            --allele-balance-priors-off \
                            --min-alternate-fraction 0.03 \
                            --min-repeat-entropy 1 \
                            --min-alternate-count 2 "
        }
    }

    // MANTA
    withName: 'MERGE_MANTA_SOMATIC' {
        ext.prefix       = {"${meta.id}.manta.somatic_sv"}
    }

    // MUTECT2
    if (params.tools && params.tools.split(',').contains('mutect2')) {
        withName: 'MUTECT2_PAIRED' {
            ext.args         = { params.ignore_soft_clipped_bases ?
                                "--dont-use-soft-clipped-bases true --f1r2-tar-gz ${task.ext.prefix}.f1r2.tar.gz --normal-sample ${meta.patient}_${meta.normal_id}" :
                                "--f1r2-tar-gz ${task.ext.prefix}.f1r2.tar.gz --normal-sample ${meta.patient}_${meta.normal_id}" }
        }
    }

    // MSISENSORPRO
    withName: 'MSISENSORPRO_MSI_SOMATIC' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/msisensorpro/${meta.id}/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // STRELKA
    withName: 'MERGE_STRELKA_INDELS' {
        ext.prefix       = {"${meta.id}.strelka.somatic_indels"}
    }
    withName: 'MERGE_STRELKA_SNVS' {
        ext.prefix       = {"${meta.id}.strelka.somatic_snvs"}
    }

    // TIDDIT
    if (params.tools && params.tools.split(',').contains('tiddit')) {
        withName: 'NFCORE_SAREK:SAREK:BAM_VARIANT_CALLING_SOMATIC_ALL:BAM_VARIANT_CALLING_SOMATIC_TIDDIT:TIDDIT_NORMAL:TABIX_BGZIP_TIDDIT_SV' {
            ext.prefix       = {"${meta.id}.tiddit.normal"}
        }

        withName: 'NFCORE_SAREK:SAREK:BAM_VARIANT_CALLING_SOMATIC_ALL:BAM_VARIANT_CALLING_SOMATIC_TIDDIT:TIDDIT_TUMOR:TABIX_BGZIP_TIDDIT_SV' {
            ext.prefix       = {"${meta.id}.tiddit.tumor"}
        }

        // SVDB
        withName: 'NFCORE_SAREK:SAREK:BAM_VARIANT_CALLING_SOMATIC_ALL:BAM_VARIANT_CALLING_SOMATIC_TIDDIT:SVDB_MERGE' {
            ext.prefix       = { "${meta.id}.tiddit" }
            publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/variant_calling/tiddit/${meta.id}/" },
                pattern: "*vcf.gz"
            ]
        }
    }

    // VCF QC
    withName: 'BCFTOOLS_STATS' {
        ext.when         = { !(params.skip_tools && params.skip_tools.split(',').contains('bcftools')) }
        ext.prefix       = { "${vcf.baseName.minus(".vcf")}" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reports/bcftools/${meta.variantcaller}/${meta.id}/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'VCFTOOLS_.*' {
        ext.when         = { !(params.skip_tools && params.skip_tools.split(',').contains('vcftools')) }
        ext.prefix       = { "${variant_file.baseName.minus(".vcf")}" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reports/vcftools/${meta.variantcaller}/${meta.id}/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'VCFTOOLS_TSTV_COUNT' {
        ext.args         = "--TsTv-by-count"
    }

    withName: 'VCFTOOLS_TSTV_QUAL' {
        ext.args         = "--TsTv-by-qual"
    }

    withName: 'VCFTOOLS_SUMMARY' {
        ext.args         = "--FILTER-summary"
    }
}
