/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
        ext.when   = When to run the module.
----------------------------------------------------------------------------------------
*/

//LOFREQ 

process {
    executor   = "local"
    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' } 
    maxRetries = 1

    withName: 'MERGE_LOFREQ*' {
        publishDir = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/lofreq/${meta.id}/" },
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }

    withName: 'MERGE_LOFREQ_INDELS' {
        ext.prefix = { "${meta.id}.lofreq.somatic_indels" }
    }
    withName: 'MERGE_LOFREQ_SNVS' {
        ext.prefix = { "${meta.id}.lofreq.somatic_snvs" }
    }

    withName: "LOFREQ_CALLPARALLEL" {
        publishDir = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/lofreq/${meta.id}/" },
            saveAs: { filename -> filename.equals('versions.yml') ? 'versions.yml' : "${meta.id}/${filename}" }
            // saveAs: { "${meta.id}/${it}" }
            // pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
        ext.args = { "--call-indels" }
        cpus   = { check_max( 1 * task.attempt, 'cpus' ) }
    }

    withName: "LOFREQ_SOMATIC" {
        publishDir = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/lofreq/${meta.id}/" },
            saveAs: { filename -> filename.equals('versions.yml') ? 'versions.yml' : "${meta.id}/${filename}" }
            // saveAs: { "${meta.id}/${it}" }
            // pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
        ext.args = { "-d /home/adduser/datasarek/outdir/variant_calling/lofreq/CCR2_N_1_1-1/CCR2_N_1_1-1/CCR2_N_1_1-1.vcf.g" }
        cpus   = { check_max( 1 * task.attempt, 'cpus' ) }
    }
    
}
