/*
 * -------------------------------------------------
 *  Nextflow config file for running tests
 * -------------------------------------------------
 * Defines bundled input files and everything required
 * to run a fast and simple test. Use as follows:
 *   nextflow run nf-core/sarek -profile test,<extra_test_profile>,<docker/singularity>
 */

params {
  config_profile_description = 'Minimal test dataset to check pipeline function'
  config_profile_name = 'Test profile'

  // Limit resources so that this can run on GitHub Actions
  max_cpus = 2
  max_memory = 6.GB
  max_time = 48.h

  // Input data
  input = 'https://raw.githubusercontent.com/nf-core/test-datasets/sarek/testdata/csv/tiny-manta-normal-https.csv'

  // Small reference genome
  igenomes_ignore = true
  genome = 'smallGRCh37'
  genomes_base = "https://raw.githubusercontent.com/nf-core/test-datasets/sarek/reference"
  snpeff_db         = 'WBcel235.86'
  species           = 'caenorhabditis_elegans'
  vep_cache_version = '99'

  // Ignore `--input` as otherwise the parameter validation will throw an error
  schema_ignore_params = 'genomes,modules,input'
}

profiles {
  annotation {
    params.input               = 'https://raw.githubusercontent.com/nf-core/test-datasets/sarek/testdata/vcf/Strelka_1234N_variants.vcf.gz'
    params.genome              = 'WBcel235'
    params.igenomes_ignore     = false
  }
  pair {
    params.input               = 'https://raw.githubusercontent.com/nf-core/test-datasets/sarek/testdata/csv/tiny-manta-https.csv'
  }
  save_bam_mapped {
    params.save_bam_mapped     = true
  }
  split_fastq {
    params.split_fastq         = 2
  }
  targeted {
    params.target_bed          = 'https://raw.githubusercontent.com/nf-core/test-datasets/sarek/testdata/target.bed'
    params.tools               = 'manta,strelka'
  }
  tool {
    params.step                = 'variant_calling'
    params.input               = 'https://raw.githubusercontent.com/nf-core/test-datasets/sarek/testdata/csv/tiny-recal-normal-https.csv'
  }
  tool_pair {
    params.step                = 'variant_calling'
    params.input               = 'https://raw.githubusercontent.com/nf-core/test-datasets/sarek/testdata/csv/tiny-recal-pair-https.csv'
    }
  trimming {
    params.trim_fastq          = true
    params.clip_r1             = 1
    params.clip_r2             = 1
    params.three_prime_clip_r1 = 1
    params.three_prime_clip_r2 = 1
  }
  use_gatk_spark {
    params.use_gatk_spark      = 'markduplicates,bqsr'
  }
  umi_quiaseq {
    params.genome              = 'smallGRCh38'
    params.genomes_base        = 'https://raw.githubusercontent.com/nf-core/test-datasets/sarek/reference/chr20_hg38'
    params.input               = 'https://raw.githubusercontent.com/nf-core/test-datasets/sarek/testdata/csv/tiny-umi-qiaseq-https.csv'
    params.umi                 = true
    params.read_structure1     = "12M11S+T"
    params.read_structure2     = "12M11S+T"
  }
  umi_tso {
    genome                     = 'smallGRCh38'
    genomes_base               = 'https://raw.githubusercontent.com/nf-core/test-datasets/sarek/reference/chr20_hg38'
    input                      = 'https://raw.githubusercontent.com/nf-core/test-datasets/sarek/testdata/csv/tiny-umi-tso-https.csv'
    umi                        = true
    read_structure1            = "7M1S+T"
    read_structure2            = "7M1S+T"
  }
}

/*
 * TODO: uncomment when ready
  process {
    withName:Snpeff {
      container = 'nfcore/sareksnpeff:dev.WBcel235'
      maxForks = 1
    }
    withLabel:VEP {
      container = 'nfcore/sarekvep:dev.WBcel235'
      maxForks = 1
    }
}
*/
