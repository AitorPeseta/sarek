/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
        ext.when   = When to run the module.
----------------------------------------------------------------------------------------
*/

process {

    publishDir           = [
        mode: params.publish_dir_mode,
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        cache = false
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/pipeline_info" },
            pattern: '*_versions.yml'
        ]
    }
}

// PREPARE_GENOME
process {

    withName: 'BWAMEM1_INDEX' {
        ext.when         = { !params.bwa && params.step == "mapping" && params.aligner == "bwa-mem" }
        publishDir       = [
            enabled: "${params.save_reference}",
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/bwa" },
            pattern: "bwa"
        ]
    }

    withName: 'BWAMEM2_INDEX' {
        ext.when         = { !params.bwa && params.step == "mapping" && params.aligner == "bwa-mem2" }
        publishDir       = [
            enabled: "${params.save_reference}",
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/bwamem2" },
            pattern: "bwa"
        ]
    }

    withName: 'CREATE_INTERVALS_BED' {
        publishDir       = [
            enabled: "${params.save_reference}",
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/intervals" },
            pattern: "*bed"
        ]
    }

    withName: 'GATK4_CREATESEQUENCEDICTIONARY' {
        ext.when         = { !params.dict && params.step != "annotate" && params.step != "controlfreec" }
        publishDir       = [
            enabled: "${params.save_reference}",
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/gatk4" },
            pattern: "*dict"
        ]
    }

    withName: 'GATK4_INTERVALLISTTOBED' {
        publishDir       = [
            enabled: "${params.save_reference}",
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/intervals" },
            pattern: "*bed"
        ]
    }

    withName: 'MSISENSORPRO_SCAN' {
        ext.when         = { params.tools && params.tools.contains('msisensorpro') }
        publishDir       = [
            enabled: "${params.save_reference}",
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/msi" },
            pattern: "*list"
        ]
    }

    withName: 'SAMTOOLS_FAIDX' {
        ext.when         = { !params.fasta_fai && params.step != "annotate" }
        publishDir       = [
            enabled: "${params.save_reference}",
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/fai" },
            pattern: "*fai"
        ]
    }

    withName: 'TABIX_BGZIPTABIX' {
        ext.prefix       = {"${meta.id}.bed"}
        publishDir       = [
            enabled: "${params.save_reference}",
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/target" },
            pattern: "*bed.gz"
        ]
    }

    withName: 'TABIX_DBSNP' {
        ext.when         = { !params.dbsnp_tbi && params.dbsnp && (params.step == "mapping" || params.step == "prepare_recalibration") || params.tools && (params.tools.contains('controlfreec') || params.tools.contains('haplotypecaller') || params.tools.contains('mutect2') || params.tools.contains('tnscope')) }
        publishDir       = [
            enabled: "${params.save_reference}",
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/dbsnp" },
            pattern: "*vcf.gz.tbi"
        ]
    }

    withName: 'TABIX_GERMLINE_RESOURCE' {
        ext.when         = { !params.germline_resource_tbi && params.germline_resource && params.tools && params.tools.contains('mutect2') }
        publishDir       = [
            enabled: "${params.save_reference}",
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/germline_resource" },
            pattern: "*vcf.gz.tbi"
        ]
    }

    withName: 'TABIX_KNOWN_INDELS' {
        ext.when         = { !params.known_indels_tbi && params.known_indels && (params.step == 'mapping' || params.step == 'prepare_recalibration') }
        publishDir       = [
            enabled: "${params.save_reference}",
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/known_indels" },
            pattern: "*vcf.gz.tbi"
        ]
    }

    withName: 'TABIX_PON' {
        ext.when         = { !params.pon_tbi && params.pon && params.tools && (params.tools.contains('mutect2') || params.tools.contains('tnscope')) }
        publishDir       = [
            enabled: "${params.save_reference}",
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/pon" },
            pattern: "*vcf.gz.tbi"
        ]
    }
}

// BAM TO FASTQ
process {

    withName: 'SAMTOOLS_FASTQ_MAPPED'{
        ext.args2 = '-N'
        ext.prefix       = {"${meta.id}.mapped"}
    }

    withName: 'SAMTOOLS_FASTQ_UNMAPPED'{
        ext.args2 = '-N'
        ext.prefix       = {"${meta.id}.unmapped"}
    }

    withName: 'SAMTOOLS_VIEW_MAP_MAP' {
        ext.args = '-b -f1 -F12'
        ext.prefix       = {"${meta.id}.map_map"}
    }

    withName: 'SAMTOOLS_VIEW_MAP_UNMAP' {
        ext.args = '-b -f8 -F260'
        ext.prefix       = {"${meta.id}.map_unmap"}
    }

    withName: 'SAMTOOLS_VIEW_UNMAP_MAP' {
        ext.args = '-b -f4 -F264'
        ext.prefix       = {"${meta.id}.unmap_map"}
    }

    withName: 'SAMTOOLS_VIEW_UNMAP_UNMAP' {
        ext.args = '-b -f12 -F256'
        ext.prefix       = {"${meta.id}.unmap_unmap"}
    }
}

// TRIMMING
process {
    withName: 'TRIMGALORE' {
        ext.args         = '--fastqc'
        ext.when         = { params.trim_fastq }
        publishDir       = [
            enabled: true,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/trimgalore/${meta.id}" }
        ]
    }
}

// UMI Subworkflow
process{

    withName: 'BAM2FASTQ' {
        ext.args         = '-T RX'
        ext.when         = { umi_read_structure }
    }

    withName: 'CALLUMICONSENSUS' {
        ext.args         = '-M 1 -S Coordinate'
        ext.prefix       = {"${meta.id}_umi-consensus"}
    }

    withName: "NFCORE_SAREK:SAREK:CREATE_UMI_CONSENSUS:MAPPING_UMI:BWAMEM.*_MEM" {
        ext.args         = '-p -C -M'
        ext.args2        = '-bS'
        ext.prefix       = {"${meta.id}.umi_unsorted"}
    }

    withName: 'SAMBLASTER' {
        ext.args         = '-M --addMateTags'
        ext.prefix       = {"${meta.id}_unsorted_tagged"}
    }
}

// SPLIT FASTQ
process {

    withName: "SEQKIT_SPLIT2" {
        ext.args         = { "--by-size ${params.split_fastq}" }
        ext.when         = { params.split_fastq > 1 }
        publishDir       = [
            enabled: "${params.save_split_fastqs}",
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

// MAPPING
process {

    withName: "BWAMEM1_MEM" {
        ext.when         = { params.aligner == "bwa-mem" }
    }
    withName: "BWAMEM2_MEM" {
        ext.when         = { params.aligner == "bwa-mem2" }
    }

    withName: "NFCORE_SAREK:SAREK:GATK4_MAPPING:BWAMEM.*_MEM" {
        // Using -B 3 for tumor samples
        ext.args         = { meta.status == 1 ? '-K 100000000 -M -B 3' : '-K 100000000 -M' }
        // Markduplicates Spark NEEDS name-sorted reads or runtime goes through the roof
        // However if it's skipped, reads need to be coordinate-sorted
        // Only name sort if Spark for Markduplicates + duplicate marking is not skipped
        ext.args2        = { params.use_gatk_spark && params.use_gatk_spark.contains('markduplicates') && (!params.skip_tools || (params.skip_tools && !params.skip_tools.contains('markduplicates'))) ? '-n' : '' }
        ext.prefix       = { params.split_fastq > 1 ? "${meta.id}".concat('.').concat(reads.get(0).name.findAll(/part_([0-9]+)?/).last()) : "" }
        publishDir       = [
            enabled: false
        ]
    }

    withName: 'INDEX_MERGE_BAM' {
        publishDir       = [
            enabled: true,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/${meta.id}/mapped" },
            pattern: "*{bam,bai}"
        ]
    }
}

// MARKDUPLICATES
process {
    withName: 'GATK4_ESTIMATELIBRARYCOMPLEXITY' {
        ext.prefix       = { "${meta.id}.md" }
        ext.when         = { !(params.skip_tools && params.skip_tools.contains('markduplicates_report')) }
        publishDir       = [
            enabled: true,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/${meta.id}/markduplicates" },
            pattern: "*{metrics}"
        ]
    }
    withName: 'GATK4_MARKDUPLICATES' {
        ext.args         = '-REMOVE_DUPLICATES false -VALIDATION_STRINGENCY LENIENT'
        ext.prefix       = { "${meta.id}.md" }
        publishDir       = [
            enabled: true,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reports/${meta.id}/markduplicates" },
            pattern: "*{metrics}"
        ]
    }
    withName: 'GATK4_MARKDUPLICATES_SPARK' {
        ext.args         = '--remove-sequencing-duplicates false -VS LENIENT'
        ext.prefix       = { !(params.skip_tools && (params.skip_tools.contains('bamqc') || params.skip_tools.contains('deeptools'))) ? "${meta.id}.md.bam" : "${meta.id}.md.cram" }
        publishDir       = [
            enabled: true,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/${meta.id}/markduplicates" },
            pattern: "*{cram,crai}"
        ]
    }
    withName: 'GATK4_MARKDUPLICATES' {
        ext.when         = { !(params.skip_tools && params.skip_tools.contains('markduplicates')) }
    }
    withName: 'SAMTOOLS_BAM_TO_CRAM' {
        ext.prefix       = { "${meta.id}.md" }
        publishDir       = [
            enabled: true,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/${meta.id}/markduplicates" },
            pattern: "*{cram,crai}"
        ]
    }
    withName: 'INDEX_MARKDUPLICATES' {
        publishDir       = [
            enabled: true,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/${meta.id}/markduplicates" },
            pattern: "*{cram,crai}"
        ]
    }
}

// PREPARE_RECALIBRATION
process {
    withName: 'BASERECALIBRATOR|BASERECALIBRATOR_SPARK|GATHERBQSRREPORTS' {
        ext.prefix       = {"${meta.id}.recal"}
        publishDir       = [
            enabled: true,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/${meta.id}/recal_table" },
            pattern: "*.table"
        ]
    }
    withName: 'GATHERBQSRREPORTS' {
        ext.when         = { !params.no_intervals }
    }

}

// RECALIBRATE
process {
    withName: 'APPLYBQSR|APPLYBQSR_SPARK' {
        ext.prefix       = {"${meta.id}.recal"}
        publishDir       = [
            enabled: false
        ]
    }
    withName: 'NFCORE_SAREK:SAREK:RECALIBRATE:MERGE_INDEX_CRAM:MERGE_CRAM' {
        ext.prefix       = { "${meta.id}.recal" }
        ext.when         = { !params.no_intervals }
        publishDir       = [
            enabled: false,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/${meta.id}/recalibrated" },
            pattern: "*cram"
        ]
    }
    withName: 'NFCORE_SAREK:SAREK:RECALIBRATE:MERGE_INDEX_CRAM:INDEX_CRAM' {
        publishDir       = [
            enabled: true,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/${meta.id}/recalibrated" },
            pattern: "*{recal.cram,recal.cram.crai}"
        ]
    }
}

// QC
process{
    withName: 'FASTQC' {
        errorStrategy    = {task.exitStatus == 143 ? 'retry' : 'ignore'}
        ext.args         = '--quiet'
        ext.when         = { !(params.skip_tools && params.skip_tools.contains('fastqc')) }
        publishDir       = [
            enabled: true,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reports/fastqc/${meta.id}" }
        ]
    }
    withName: 'QUALIMAP_BAMQC' {
        ext.args         = '--paint-chromosome-limits --genome-gc-distr HUMAN -skip-duplicated --skip-dup-mode 0 -outformat HTML'
        ext.prefix       = { "${meta.id}.mapped" }
        ext.when         = { !(params.skip_tools && params.skip_tools.contains('bamqc')) }
        publishDir       = [
            enabled: true,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reports/qualimap/${meta.id}" }
        ]
    }
    withName: 'SAMTOOLS_STATS' {
        ext.when         = { !(params.skip_tools && params.skip_tools.contains('samtools')) }
        publishDir       = [
            enabled: true,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reports/samtools_stats/${meta.id}" }
        ]
    }
    withName: 'DEEPTOOLS_BAMCOVERAGE' {
        ext.when         = { !(params.skip_tools && params.skip_tools.contains('deeptools')) }
        publishDir       = [
            enabled: true,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reports/deeptools/${meta.id}" }
        ]
    }
    withName: 'QUALIMAP_BAMQCCRAM' {
        ext.args         = '--paint-chromosome-limits --genome-gc-distr HUMAN -skip-duplicated --skip-dup-mode 0 -outformat HTML'
        ext.prefix       = { "${meta.id}.recal" }
        ext.when         = { !(params.skip_tools && params.skip_tools.contains('bamqc')) }
        publishDir       = [
            enabled: true,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reports/qualimap/${meta.id}" }
        ]
    }
    withName: 'NFCORE_SAREK:SAREK:CRAM_QC:SAMTOOLS_STATS' {
        ext.when         = { !(params.skip_tools && params.skip_tools.contains('samtools')) }
        publishDir       = [
            enabled: true,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reports/samtools_stats/${meta.id}" }
        ]
    }
}

// VARIANT CALLING
process{
    // ALL
    withName: 'CONCAT_.*' {
        // For unknown reasons, CONCAT_VCF sometimes fails with SIGPIPE
        // (exit code 141). Rerunning the process will usually work.
        errorStrategy   = {task.exitStatus == 141 ? 'retry' : 'terminate'}
        ext.args         = { params.no_intervals ?  "-n" : "" }
    }
    withName : 'TABIX_VC_.*' {
        ext.when         = { params.no_intervals }
    }
    withName : 'BGZIP_VC_.*' {
        ext.when         = { !params.no_intervals }
        publishDir       = [
            enabled: false
        ]
    }

    // DEEPVARIANT
    withName: 'BGZIP_VC_DEEPVARIANT_GVCF' {
        ext.when         = { params.generate_gvcf && !params.no_intervals }
    }
    withName: 'CONCAT_DEEPVARIANT_.*' {
        publishDir       = [
            enabled: "${!params.no_intervals}",
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/deepvariant" },
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }
    withName: 'CONCAT_DEEPVARIANT_GVCF' {
        ext.prefix       = {"${meta.id}.g"}
    }
    withName: 'DEEPVARIANT' {
        ext.args         = { params.wes ?  "--model_type WES" : "--model_type WGS" }
        ext.when         = { params.tools && params.tools.contains('deepvariant') }
        publishDir       = [
            enabled: "${params.no_intervals}",
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/deepvariant" },
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }
    withName : 'TABIX_VC_DEEPVARIANT_GVCF' {
        publishDir       = [
            enabled: "${params.generate_gvcf}",
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/deepvariant" },
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }
    withName : 'TABIX_VC_DEEPVARIANT_VCF' {
        publishDir       = [
            enabled: true,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/deepvariant" },
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }

    // FREEBAYES
    withName: 'CONCAT_FREEBAYES' {
        publishDir       = [
            enabled: "${!params.no_intervals}",
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/freebayes" }
        ]
    }
    withName: 'FREEBAYES' {
        ext.args         = '--min-alternate-fraction 0.1 --min-mapping-quality 1'
        ext.when         = { params.tools && params.tools.contains('freebayes') }
        publishDir       = [
            enabled: "${params.no_intervals}",
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/freebayes" }
        ]
    }
    withName : 'TABIX_VC_FREEBAYES' {
        publishDir       = [
            enabled: true,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/freebayes" }
        ]
    }

    // HAPLOTYPECALLER
    withName: 'CONCAT_HAPLOTYPECALLER' {
        ext.prefix       = {"${meta.id}.g"}
        publishDir       = [
            enabled: "${params.generate_gvcf}",
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/haplotypecaller" }
        ]
    }
    withName: 'HAPLOTYPECALLER' {
        ext.args         = '-ERC GVCF'
        ext.prefix       = {"${meta.id}.g"}
        ext.when         = { params.tools && params.tools.contains('haplotypecaller') }
        publishDir       = [
            enabled: "${params.no_intervals || params.generate_gvcf}",
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/haplotypecaller"},
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }
    withName: 'GENOTYPEGVCFS' {
        ext.when         = { params.tools && params.tools.contains('haplotypecaller') }
        publishDir       = [
            enabled: true,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/haplotypecaller"},
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }
    withName : 'TABIX_VC_HAPLOTYPECALLER' {
        publishDir       = [
            enabled: "${params.generate_gvcf}",
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/haplotypecaller" }
        ]
    }

    // MANTA
    withName: 'CONCAT_MANTA.*' {
        publishDir       = [
            enabled: "${!params.no_intervals}",
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/manta" },
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }
    withName: 'CONCAT_MANTA_DIPLOID' {
        ext.prefix       = {"${meta.id}.diploid_sv"}
    }
    withName: 'CONCAT_MANTA_SMALL_INDELS' {
        ext.prefix       = {"${meta.id}.candidate_small_indels"}
    }
    withName: 'CONCAT_MANTA_SV' {
        ext.prefix       = {"${meta.id}.candidate_sv"}
    }
    withName: 'MANTA.*' {
        ext.args         = { params.wes ? "--exome" : "" }
        ext.when         = { params.tools && params.tools.contains('manta') }
        publishDir       = [
            enabled: "${params.no_intervals}",
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/manta" },
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }

    // STRELKA
    withName: 'CONCAT_STRELKA.*' {
        publishDir       = [
            enabled: "${!params.no_intervals}",
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/strelka" },
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }
    withName: 'CONCAT_STRELKA' {
        ext.prefix       = {"${meta.id}.variants"}
    }
    withName: 'CONCAT_STRELKA_GENOME' {
        ext.prefix       = {"${meta.id}.genome"}
    }
    withName: 'STRELKA_.*' {
        ext.args         = { params.wes ? "--exome" : "" }
        ext.when         = { params.tools && params.tools.contains('strelka') }
        publishDir       = [
            enabled: "${params.no_intervals}",
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/strelka" },
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }

    //withName: 'TIDDIT_SV' {
    //    publishDir       = [
    //            enabled: true,
    //            mode: params.publish_dir_mode,
    //            path: { "${params.outdir}/variant_calling/${meta.id}/tiddit" }
    //            ]
    //}

// TUMOR_VARIANT_CALLING

    withName: 'MERGEMUTECTSTATS' {
        ext.prefix       = { "${meta.id}.vcf.gz" }
    }
    withName: 'GATHERPILEUPSUMMARIES' {
        ext.prefix       = { "${meta.id}.table" }
    }

// PAIR_VARIANT_CALLING

    withName: 'MUTECT2'{
        publishDir       = [
            enabled: "${params.no_intervals}",
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/mutect2" }
        ]
    }
    withName: 'GATK4_MUTECT2'{
        publishDir       = [
            enabled: "${params.no_intervals}",
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/mutect2" }
        ]
    }
    withName: 'CONCAT_MUTECT2' {
        publishDir       = [
            enabled: "${!params.no_intervals}",
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/mutect2" }
        ]
    }
    withName: 'GATK4_MERGEMUTECTSTATS' {
        publishDir       = [
            enabled: true,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/mutect2" }
        ]
    }
    withName: 'GATK4_FILTERMUTECTCALLS'{
        ext.prefix       = {"${meta.id}.filtered."}
        publishDir       = [
            enabled: true,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/mutect2" }
        ]
    }
}
// withName: 'GATK4_CALCULATECONTAMINATION'{
//    ext.args          = ''
//     publishDir        = [
//         enabled: false,
//         mode: params.publish_dir_mode
//     ]
//}
//withName: 'GATK4_FILTERMUTECTCALLS'{
//    ext.args          = ''
//     publishDir        = [
//         enabled: false,
//         mode: params.publish_dir_mode
//     ]
//}
//withName: 'GATK4_GETPILEUPSUMMARIES'{
//    ext.args          = ''
//     publishDir        = [
//         enabled: false,
//         mode: params.publish_dir_mode
//     ]
//}
//withName: 'GENOMICSDBIMPORT' {
//
//}

// withName: manta_somatic {
//     publishDir       = [
//             path: { "${params.outdir}/variant_calling'
//     publish_files    = ['vcf.gz':'manta', 'vcf.gz.tbi':'manta']
// }
// withName: msisensorpro_msi {
//     publishDir       = [
//             path: { "${params.outdir}/variant_calling'
//     publish_files    = ['list':'msisensorpro']
// }
// withName: strelka_somatic {
//     publishDir       = [
//             path: { "${params.outdir}/variant_calling'
//     publish_files    = ['vcf.gz':'strelka', 'vcf.gz.tbi':'strelka']
// }
// withName: strelka_somatic_bp {
//     publishDir       = [
//             path: { "${params.outdir}/variant_calling'
//     publish_files    = ['vcf.gz':'strelka', 'vcf.gz.tbi':'strelka']
// }
// withName: mutect2_somatic {
//     publishDir       = [
//             path: { "${params.outdir}/variant_calling'
//     publish_files    = ['vcf.gz':'mutect2', 'vcf.gz.tbi':'mutect2']
// }

// ANNOTATE
process {

    withName: 'ENSEMBLVEP' {
        ext.args          = '--everything --filter_common --per_gene --total_length --offline'
        container         = { "nfcore/vep:104.3.${params.genome}" }
    }

    withName: 'SNPEFF' {
        ext.args          = '-nodownload -canon -v'
        container         = { "nfcore/snpeff:5.0.${params.genome}" }
    }

    withName: 'ANNOTATION_BGZIPTABIX' {
        publishDir       = [
                enabled: true,
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/annotation/${meta.id}" },
                pattern: "*{gz,gz.tbi}"
        ]
    }
}

if (params.tools && (params.tools.contains('snpeff') || params.tools.contains('merge'))) {
    process {
        withName: 'NFCORE_SAREK:SAREK:ANNOTATE:ANNOTATION_SNPEFF:ANNOTATION_BGZIPTABIX' {
            ext.prefix       = {"${meta.id}_snpEff.ann.vcf"}
        }
    }
}

if (params.tools && (params.tools.contains('vep'))) {
    process {
        withName: 'NFCORE_SAREK:SAREK:ANNOTATE:ANNOTATION_ENSEMBLVEP:ANNOTATION_BGZIPTABIX' {
            ext.prefix       = {"${meta.id}_VEP.ann.vcf"}
        }
    }
}

if (params.tools && (params.tools.contains('merge'))) {
    process {
        withName: 'NFCORE_SAREK:SAREK:ANNOTATE:MERGE_ANNOTATE:ANNOTATION_BGZIPTABIX' {
            ext.prefix       = {"${meta.id}_snpEff_VEP.ann.vcf"}
        }
    }
}

// process {
//     withName:'MULTIQC' {
//         errorStrategy = {task.exitStatus == 143 ? 'retry' : 'ignore'}
//     }
// }

// process {
    // withName: CUSTOM_DUMPSOFTWAREVERSIONS {
    //     publishDir = [
    //         mode: params.publish_dir_mode,
    //         path: { "${params.outdir}/pipeline_info" },
    //         pattern: '*_versions.yml'
// }
