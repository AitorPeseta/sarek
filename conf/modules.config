/*
========================================================================================
    Config file for defining DSL2 per module options and publishing paths
========================================================================================
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.suffix          = File name ext.suffix output files. Not available for nf-core modules
        ext.prefix          = File name prefix for output files.
        ext.when            = When to run the module.
----------------------------------------------------------------------------------------
*/

process {

    publishDir           = [
        mode: "${params.publish_dir_mode}",
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir       = [
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/pipeline_info" },
            pattern: '*_versions.yml'
        ]
    }
}

// PREPARE_GENOME
process {

    withName: 'BWAMEM1_INDEX' {
        ext.when         = { !params.bwa && params.step == "mapping" && params.aligner == "bwa-mem" }
        publishDir       = [
            enabled: "${params.save_reference}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/reference/bwa" },
            pattern: "bwa"
        ]
    }

    withName: 'BWAMEM2_INDEX' {
        ext.when         = { !params.bwa && params.step == "mapping" && params.aligner == "bwa-mem2" }
        publishDir       = [
            enabled: "${params.save_reference}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/reference/bwamem2" },
            pattern: "bwa"
        ]

    }
    withName: 'CREATE_INTERVALS_BED' {
        publishDir       = [
            enabled: "${params.save_reference}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/reference/intervals" },
            pattern: "*bed"
        ]
    }

    withName: 'GATK4_CREATESEQUENCEDICTIONARY' {
        ext.when         = { !params.dict && params.step != "annotate" && params.step != "controlfreec" }
        publishDir       = [
            enabled: "${params.save_reference}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/reference/gatk4" },
            pattern: "*dict"
        ]
    }

    withName: 'MSISENSORPRO_SCAN' {
        ext.when         = { params.tools && params.tools.contains('msisensorpro') }
        publishDir       = [
            enabled: "${params.save_reference}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/reference/msi" },
            pattern: "*list"
        ]
    }

    withName: 'SAMTOOLS_FAIDX' {
        ext.when         = { !params.fasta_fai && params.step != "annotate" }
        publishDir       = [
            enabled: "${params.save_reference}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/reference/fai" },
            pattern: "*fai"
        ]
    }

    withName: 'TABIX_BGZIPTABIX' {
        ext.prefix       = {"${meta.id}.bed"}
        publishDir       = [
            enabled: "${params.save_reference}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/reference/target" },
            pattern: "*bed.gz"
        ]
    }

    withName: 'TABIX_DBSNP' {
        ext.when         = { !params.dbsnp_tbi && params.dbsnp && (params.step == "mapping" || params.step == "prepare_recalibration") || params.tools && (params.tools.contains('controlfreec') || params.tools.contains('haplotypecaller') || params.tools.contains('mutect2') || params.tools.contains('tnscope')) }
        publishDir       = [
            enabled: "${params.save_reference}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/reference/dbsnp" },
            pattern: "*vcf.gz.tbi"
        ]
    }

    withName: 'TABIX_GERMLINE_RESOURCE' {
        ext.when         = { !params.germline_resource_tbi && params.germline_resource && params.tools && params.tools.contains('mutect2') }
        publishDir       = [
            enabled: "${params.save_reference}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/reference/germline_resource" },
            pattern: "*vcf.gz.tbi"
        ]
    }

    withName: 'TABIX_KNOWN_INDELS' {
        ext.when         = { !params.known_indels_tbi && params.known_indels && (params.step == 'mapping' || params.step == 'prepare_recalibration') }
        publishDir       = [
            enabled: "${params.save_reference}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/reference/known_indels" },
            pattern: "*vcf.gz.tbi"
        ]
    }

    withName: 'TABIX_PON' {
        ext.when         = { !params.pon_tbi && params.pon && params.tools && (params.tools.contains('mutect2') || params.tools.contains('tnscope')) }
        publishDir       = [
            enabled: "${params.save_reference}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/reference/pon" },
            pattern: "*vcf.gz.tbi"
        ]
    }
}

// UMI Subworkflow
process{
    withName: 'BAM2FASTQ' {
        ext.args         = '-T RX'
    }

    withName: 'SAMBLASTER' {
        ext.args         = '-M --addMateTags'
        ext.prefix       = {"${meta.id}_unsorted_tagged"}
    }

    withName: 'CALLUMICONSENSUS' {
        ext.args         = '-M 1 -S Coordinate'
        ext.prefix       = {"${meta.id}_umi-consensus"}
    }
}

if (params.umi_read_structure) {
    process {
        withName: "NFCORE_SAREK:SAREK:CREATE_UMI_CONSENSUS:BWA.*_MEM" {
            ext.args         = '-p -C -M'
            ext.args2        = '-bS'
            ext.prefix       = {"${meta.id}.umi_unsorted"}
        }
    }
}

//BAMTOFASTQ
process {
    withName: 'SAMTOOLS_VIEW_MAP_MAP' {
        ext.args = '-b -f1 -F12'
        ext.prefix       = {"${meta.id}.map_map"}
    }
    withName: 'SAMTOOLS_VIEW_UNMAP_UNMAP' {
        ext.args = '-b -f12 -F256'
        ext.prefix       = {"${meta.id}.unmap_unmap"}
    }
    withName: 'SAMTOOLS_VIEW_UNMAP_MAP' {
        ext.args = '-b -f4 -F264'
        ext.prefix       = {"${meta.id}.unmap_map"}
    }
    withName: 'SAMTOOLS_VIEW_MAP_UNMAP' {
        ext.args = '-b -f8 -F260'
        ext.prefix       = {"${meta.id}.map_unmap"}
    }
    withName: 'SAMTOOLS_FASTQ_UNMAPPED'{
        ext.args2 = '-N'
        ext.prefix       = {"${meta.id}.unmapped"}
    }
    withName: 'SAMTOOLS_FASTQ_MAPPED'{
        ext.args2 = '-N'
        ext.prefix       = {"${meta.id}.mapped"}
    }
}

// FASTQ_QC_TRIM
process {
    withName: 'FASTQC' {
        ext.args         = '--quiet'
        ext.when         = { !(params.skip_tools && params.skip_tools.contains('fastqc')) }
        publishDir       = [
            enabled: true,
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/reports/fastqc/${meta.id}" }
        ]
    }
    withName: 'TRIMGALORE' {
        ext.args         = '--fastqc'
        ext.when         = { params.trim_fastq }
        publishDir       = [
            enabled: true,
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/trimgalore/${meta.id}" }
        ]
    }
}

// MAPPING
process {

    withName: "SEQKIT_SPLIT2" {
        ext.args         = { "--by-size ${params.split_fastq}" }
        ext.when         = { params.split_fastq > 1 }
        publishDir       = [
            enabled: "${params.save_split_fastqs}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: "BWAMEM1_MEM" {
        ext.when         = { params.aligner == "bwa-mem" }
    }
    withName: "BWAMEM2_MEM" {
        ext.when         = { params.aligner == "bwa-mem2" }
    }

    withName: "BWA.*MEM" {
        ext.args         = { meta.status == 1 ? '-K 100000000 -M -B 3' : '-K 100000000 -M' }
        ext.prefix       = { params.split_fastq > 1 ?  "${meta.id}".concat('.').concat(reads.get(0).name.findAll(/part_([0-9]+)?/).last()) : "" }
    }

    withName: 'MERGE_MAPPING' {
        ext.when         = { params.save_bam_mapped || (params.skip_tools && params.skip_tools.contains('markduplicates')) }
    }

    withName: 'INDEX_MAPPING' {
        ext.when         = { params.save_bam_mapped || (params.skip_tools && params.skip_tools.contains('markduplicates')) }
        publishDir       = [
            enabled: true,
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/preprocessing/${meta.id}/mapped" },
            pattern: "*{bam,bai}"
        ]
    }
}

// Markduplicates Spark NEEDS name-sorted reads or runtime goes through the roof
// However if it's skipped, reads need to be coordinate-sorted
// Only name sort if Spark for Markduplicates + duplicate marking is not skipped
if ( params.use_gatk_spark && params.use_gatk_spark.contains('markduplicates') && (!params.skip_tools || (params.skip_tools && !params.skip_tools.contains('markduplicates')))) {
    process {
        withName: "BWA.*_MEM" {
            ext.args2    = '-n'
        }
    }
}

// MARKDUPLICATES
process {
    withName: 'GATK4_ESTIMATELIBRARYCOMPLEXITY' {
        ext.prefix       = {"${meta.id}.md"}
        ext.when         = { (params.use_gatk_spark && params.use_gatk_spark.contains('markduplicates')) && (!(params.skip_tools && params.skip_tools.contains('markduplicates_report'))) }
        publishDir       = [
            enabled: true,
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/preprocessing/${meta.id}/markduplicates" },
            pattern: "*{metrics}"
        ]
    }
    withName: 'GATK4_MARKDUPLICATES' {
        ext.args         = '-REMOVE_DUPLICATES false -VALIDATION_STRINGENCY LENIENT'
        ext.prefix       = {"${meta.id}.md"}
        //publishDir       = [
        //    enabled: false
        //    mode: "${params.publish_dir_mode}",
        //    path: { "${params.outdir}/preprocessing/${meta.id}/markduplicates" },
        //]
    }
    withName: 'GATK4_MARKDUPLICATES_SPARK' {
        ext.args         = '--remove-sequencing-duplicates false -VS LENIENT'
        ext.suffix       = { !(params.skip_tools && (params.skip_tools.contains('bamqc') || params.skip_tools.contains('deeptools'))) ? '.md.bam' : '.md.cram' }
        ext.when         = { params.use_gatk_spark && params.use_gatk_spark.contains('markduplicates') }
        publishDir       = [
            enabled: true,
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/preprocessing/${meta.id}/markduplicates" },
            pattern: "*{cram,crai}"
        ]
    }
    withName: 'QUALIMAP_BAMQC' {
        ext.args         = '--paint-chromosome-limits --genome-gc-distr HUMAN -skip-duplicated --skip-dup-mode 0 -outformat HTML'
        ext.suffix       = '.mapped'
        ext.when         = { !(params.skip_tools && params.skip_tools.contains('bamqc')) }
        publishDir       = [
            enabled: true,
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/reports/qualimap/${meta.id}" }
        ]
    }
    withName: 'SAMTOOLS_STATS' {
        ext.when         = { !(params.skip_tools && params.skip_tools.contains('samtools')) }
        publishDir       = [
            enabled: true,
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/reports/samtools_stats/${meta.id}" }
        ]
    }
    withName: 'DEEPTOOLS_BAMCOVERAGE' {
        ext.when         = { !(params.skip_tools && params.skip_tools.contains('deeptools')) }
        publishDir       = [
            enabled: true,
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/reports/deeptools/${meta.id}" }
        ]
    }
    withName: 'SAMTOOLS_BAM_TO_CRAM_NO_DUPLICATES' {
        ext.when         = { params.skip_tools && params.skip_tools.contains('markduplicates') }
    }
    withName: 'GATK4_MARKDUPLICATES|SAMTOOLS_BAM_TO_CRAM_DUPLICATES' {
        ext.when         = { !(params.skip_tools && params.skip_tools.contains('markduplicates')) && !(params.use_gatk_spark && params.use_gatk_spark.contains('markduplicates')) }
    }
    withName: 'SAMTOOLS_BAM_TO_CRAM_SPARK' {
        ext.when         = { !(params.skip_tools && (params.skip_tools.contains('bamqc') || params.skip_tools.contains('deeptools'))) }
    }
    withName: 'SAMTOOLS_BAM_TO_CRAM_DUPLICATES|SAMTOOLS_BAM_TO_CRAM_NO_DUPLICATES|SAMTOOLS_BAM_TO_CRAM_SPARK' {
        ext.suffix       = '.md'
        publishDir       = [
            enabled: true,
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/preprocessing/${meta.id}/markduplicates" },
            pattern: "*{cram,crai}"
        ]
    }
    withName: 'INDEX_MARKDUPLICATES' {
        publishDir       = [
            enabled: true,
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/preprocessing/${meta.id}/markduplicates" },
            pattern: "*{cram,crai}"
        ]
    }
}

// PREPARE_RECALIBRATION
process {
    withName: 'BASERECALIBRATOR|BASERECALIBRATOR_SPARK|GATHERBQSRREPORTS' {
        ext.prefix       = {"${meta.id}.recal"}
        publishDir       = [
            enabled: true,
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/preprocessing/${meta.id}/recal_table" },
            pattern: "*.table"
        ]
    }

    withName: 'BASERECALIBRATOR' {
        ext.when         = { !params.use_gatk_spark || (params.use_gatk_spark && !params.use_gatk_spark.contains('baserecalibrator')) }
    }
    withName: 'BASERECALIBRATOR_SPARK' {
        ext.when         = { params.use_gatk_spark && params.use_gatk_spark.contains('baserecalibrator') }
    }
    withName: 'GATHERBQSRREPORTS' {
        ext.when         = { !params.no_intervals }
    }

}

// RECALIBRATE
process {
    withName: 'APPLYBQSR' {
        ext.when         = { !params.use_gatk_spark || (params.use_gatk_spark && !params.use_gatk_spark.contains('baserecalibrator')) }
    }
    withName: 'APPLYBQSR_SPARK' {
        ext.when         = { params.use_gatk_spark && params.use_gatk_spark.contains('baserecalibrator') }
    }
    withName: 'APPLYBQSR|APPLYBQSR_SPARK' {
        ext.prefix       = {"${meta.id}.recal"}
    }
    withName: 'SAMTOOLS_MERGE_CRAM' {
        ext.suffix       = '.recal'
        ext.when         = { !params.no_intervals }
        publishDir       = [
            enabled: true,
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/preprocessing/${meta.id}/recalibrated" },
            pattern: "*cram"
        ]
    }
    withName: 'QUALIMAP_BAMQC_CRAM' {
        ext.args         = '--paint-chromosome-limits --genome-gc-distr HUMAN -skip-duplicated --skip-dup-mode 0 -outformat HTML'
        ext.suffix       = '.recal'
        ext.when         = { !(params.skip_tools && params.skip_tools.contains('bamqc')) }
        publishDir       = [
            enabled: true,
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/reports/qualimap/${meta.id}" }
        ]
    }
    withName: 'INDEX_RECALIBRATE' {
        ext.suffix       = 'recal'
        publishDir       = [
            enabled: true,
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/preprocessing/${meta.id}/recalibrated" },
            pattern: "*{recal.cram,recal.cram.crai}"
        ]
    }
    withName: 'SAMTOOLS_STATS' {
        ext.when         = { !(params.skip_tools && params.skip_tools.contains('samtools')) }
        publishDir       = [
            enabled: true,
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/reports/samtools_stats/${meta.id}" }
        ]
    }
}

// GERMLINE & TUMOR ONLY Variant_Calling
process{
    withName: 'CONCAT_VCF_DEEPVARIANT' {
        ext.args         = "${ params.no_intervals ?  "-n" : "" } -T ${params.scratchdir}"
        ext.prefix       = {"${meta.sample}"}
        publishDir       = [
            enabled: "!${params.no_intervals}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/variant_calling/${meta.sample}/deepvariant" }
        ]
    }
    withName: 'CONCAT_GVCF_DEEPVARIANT' {
        ext.args         = "${ params.no_intervals ?  "-n" : "" } -T ${params.scratchdir}"
        ext.prefix       = {"${meta.sample}.g"}
        publishDir       = [
            enabled: "!${params.no_intervals}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/variant_calling/${meta.sample}/deepvariant" }
        ]
    }

    withName: 'CONCAT_VCF_FREEBAYES' {
        ext.args         = "${ params.no_intervals ?  "-n" : "" } -T ${params.scratchdir}"
        ext.prefix       = {"${meta.sample}"}
        publishDir       = [
            enabled: "!${params.no_intervals}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/variant_calling/${meta.sample}/freebayes" }
        ]

    }
    withName: 'CONCAT_VCF_HAPLOTYPECALLER' {
        ext.args         = "${ params.no_intervals ?  "-n" : "" } -T ${params.scratchdir}"
        ext.prefix       = {"${meta.sample}.g"}
        publishDir       = [
            enabled: "!${params.no_intervals}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/variant_calling/${meta.sample}/haplotypecaller" }
        ]
    }
    withName: 'HAPLOTYPECALLER' {
        publishDir       = [
            enabled: false,
            mode: 'copy',
            path: { "${params.outdir}/variant_calling/haplotypecaller"},
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
        ext.args         = '-ERC GVCF'
        ext.prefix        = {"${meta.id}.g"}
    }
    withName: 'GENOTYPEGVCFS' {
        publishDir       = [
            enabled: true,
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/variant_calling/${meta.id}/haplotypecaller"},
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }
    withName: 'CONCAT_VCF_MANTA_.*' {
        ext.args         = "${ params.no_intervals ?  "-n" : "" } -T ${params.scratchdir}"
        ext.prefix       = {"${meta.sample}"}
        publishDir       = [
            enabled: "!${params.no_intervals}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/variant_calling/${meta.sample}/manta" }
        ]
    }
    withName: 'CONCAT_VCF_MUTECT2' {
        ext.args         = "${ params.no_intervals ?  "-n" : "" } -T ${params.scratchdir}"
        ext.prefix       = {"${meta.sample}"}
        publishDir       = [
            enabled: "!${params.no_intervals}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/variant_calling/${meta.sample}/mutect2" }
        ]
    }
    withName: 'CONCAT_VCF_STRELKA' {
        ext.args         = "${ params.no_intervals ?  "-n" : "" } -T ${params.scratchdir}"
        ext.prefix       = {"${meta.sample}"}
        publishDir       = [
            enabled: "!${params.no_intervals}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/variant_calling/${meta.sample}/strelka" }
        ]
    }
    withName: 'DEEPVARIANT' {
        ext.args         = { params.wes ?  "--model_type WES" : "--model_type WGS" }
    }
    withName: 'FREEBAYES' {
        ext.args         = '--min-alternate-fraction 0.1 --min-mapping-quality 1'
        publishDir       = [
            enabled: "${params.no_intervals}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/variant_calling/${meta.sample}/manta" }
        ]
    }
    // withName: 'GATK4_CALCULATECONTAMINATION'{
    //    ext.args          = ''
    //     publishDir        = [
    //         enabled: false,
    //         mode: "${params.publish_dir_mode}"
    //     ]
    //}
    //withName: 'GATK4_FILTERMUTECTCALLS'{
    //    ext.args          = ''
    //     publishDir        = [
    //         enabled: false,
    //         mode: "${params.publish_dir_mode}"
    //     ]
    //}
    //withName: 'GATK4_GETPILEUPSUMMARIES'{
    //    ext.args          = ''
    //     publishDir        = [
    //         enabled: false,
    //         mode: "${params.publish_dir_mode}"
    //     ]
    //}
    withName: 'GATK4_MUTECT2'{
        publishDir       = [
            enabled: "${params.no_intervals}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/variant_calling/${meta.sample}/mutect2" }
        ]
    }
    //withName: 'GENOMICSDBIMPORT' {
    //
    //}
    withName: 'MANTA_GERMLINE|MANTA_TUMORONLY|MANTA_SOMATIC' {
        ext.args         = { params.wes ? "--exome" : "" }
        publishDir       = [
            enabled: "${params.no_intervals}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/variant_calling/${meta.sample}/manta" }
        ]
    }
    withName: 'STRELKA_GERMLINE|STRELKA_TUMORONLY|STRELKA_SOMATIC|STRELKA_BP' {
        ext.args         = { params.wes ? "--exome" : "" }
        publishDir       = [
            enabled: "${params.no_intervals}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/variant_calling/${meta.sample}/strelka" }
        ]
    }
    withName : 'TABIX_DEEPVARIANT_VCF|TABIX_DEEPVARIANT_GVCF' {
        ext.prefix       = {"${meta.sample}"}
        publishDir       = [
            enabled: true,
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/variant_calling/${meta.sample}/deepvariant" }
        ]
    }
    withName : 'TABIX_FREEBAYES' {
        ext.prefix       = {"${meta.sample}"}
        publishDir       = [
            enabled: true,
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/variant_calling/${meta.sample}/freebayes" }
        ]
    }
    withName : 'TABIX_HAPLOTYPECALLER' {
        ext.prefix       = {"${meta.sample}"}
        publishDir       = [
            enabled: true,
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/variant_calling/${meta.sample}/haplotypecaller" }
        ]
    }
    //withName: 'TIDDIT_SV' {
    //    publishDir       = [
    //            enabled: true,
    //            mode: "${params.publish_dir_mode}",
    //            path: { "${params.outdir}/variant_calling/${meta.sample}/tiddit" }
    //            ]
    //}

}

// TUMOR_VARIANT_CALLING
process{

    withName: 'MERGEMUTECTSTATS' {
        ext.prefix       = { "${meta.sample}.vcf.gz" }
    }
    withName: 'GATHERPILEUPSUMMARIES' {
        ext.prefix       = { "${meta.sample}.table" }
    }
}

// PAIR_VARIANT_CALLING

process{

    withName: 'NFCORE_SAREK:SAREK:PAIR_VARIANT_CALLING:GATK_TUMOR_NORMAL_SOMATIC_VARIANT_CALLING:MUTECT2'{
        publishDir       = [
            enabled: "${params.no_intervals}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/variant_calling/${meta.id}/mutect2" }
        ]
    }
    withName: 'NFCORE_SAREK:SAREK:PAIR_VARIANT_CALLING:GATK_TUMOR_NORMAL_SOMATIC_VARIANT_CALLING:CONCAT_VCF_MUTECT2' {
        ext.args         = "${ params.no_intervals ?  "-n" : "" } -T ${params.scratchdir}"
        ext.prefix       = {"${meta.id}"}
        publishDir       = [
            enabled: "!${params.no_intervals}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/variant_calling/${meta.id}/mutect2" }
        ]
    }
    withName: 'GATK4_MERGEMUTECTSTATS' {
        publishDir       = [
            enabled: true,
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/variant_calling/${meta.id}/mutect2" }
        ]
    }
    withName: 'GATK4_FILTERMUTECTCALLS'{
        ext.prefix       = {"${meta.id}.filtered."}
        publishDir       = [
            enabled: true,
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/variant_calling/${meta.id}/mutect2" }
        ]
    }
}

// withName: manta_somatic {
//     publishDir       = [
//             path: { "${params.outdir}/variant_calling'
//     publish_files    = ['vcf.gz':'manta', 'vcf.gz.tbi':'manta']
// }
// withName: msisensorpro_msi {
//     publishDir       = [
//             path: { "${params.outdir}/variant_calling'
//     publish_files    = ['list':'msisensorpro']
// }
// withName: strelka_somatic {
//     publishDir       = [
//             path: { "${params.outdir}/variant_calling'
//     publish_files    = ['vcf.gz':'strelka', 'vcf.gz.tbi':'strelka']
// }
// withName: strelka_somatic_bp {
//     publishDir       = [
//             path: { "${params.outdir}/variant_calling'
//     publish_files    = ['vcf.gz':'strelka', 'vcf.gz.tbi':'strelka']
// }
// withName: mutect2_somatic {
//     publishDir       = [
//             path: { "${params.outdir}/variant_calling'
//     publish_files    = ['vcf.gz':'mutect2', 'vcf.gz.tbi':'mutect2']
// }

// ANNOTATE
process {

    withName: 'ENSEMBLVEP' {
        ext.args          = '--everything --filter_common --per_gene --total_length --offline'
        container         = { "nfcore/vep:104.3.${params.genome}" }
    }

    withName: 'SNPEFF' {
        ext.args          = '-nodownload -canon -v'
        container         = { "nfcore/snpeff:5.0.${params.genome}" }
    }

    withName: 'ANNOTATION_BGZIPTABIX' {
        publishDir       = [
                enabled: true,
                mode: "${params.publish_dir_mode}",
                path: { "${params.outdir}/annotation/${meta.id}" },
                pattern: "*{gz,gz.tbi}"
        ]
    }
}

if (params.tools && (params.tools.contains('snpeff') || params.tools.contains('merge'))) {
    process {
        withName: 'NFCORE_SAREK:SAREK:ANNOTATE:ANNOTATION_SNPEFF:ANNOTATION_BGZIPTABIX' {
            ext.prefix       = {"${meta.id}_snpEff.ann.vcf"}
        }
    }
}

if (params.tools && (params.tools.contains('vep'))) {
    process {
        withName: 'NFCORE_SAREK:SAREK:ANNOTATE:ANNOTATION_ENSEMBLVEP:ANNOTATION_BGZIPTABIX' {
            ext.prefix       = {"${meta.id}_VEP.ann.vcf"}
        }
    }
}

if (params.tools && (params.tools.contains('merge'))) {
    process {
        withName: 'NFCORE_SAREK:SAREK:ANNOTATE:MERGE_ANNOTATE:ANNOTATION_BGZIPTABIX' {
            ext.prefix       = {"${meta.id}_snpEff_VEP.ann.vcf"}
        }
    }
}
